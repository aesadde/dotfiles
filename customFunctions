# vim: ft=sh

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
    *.tar.gz)    tar xvzf $1     ;;
    *.bz2)       bunzip2 $1      ;;
    *.rar)       unrar x $1      ;;
    *.gz)        gunzip $1       ;;
    *.tar)       tar xvf $1      ;;
    *.tbz2)      tar xvjf $1     ;;
    *.tgz)       tar xvzf $1     ;;
    *.zip)       unzip $1        ;;
    *.Z)         uncompress $1   ;;
    *.7z)        7z x $1         ;;
    *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
    else
        echo "'$1' is not a valid file!"
            fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Make your directories and files access rights sane.
function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

# Function calls cht.sh (awesome cheatsheets!)
function cheat() {
      curl cht.sh/$1
  }

# Install (one or multiple) selected application(s)
# using "brew search" as source input
# mnemonic [B]rew [I]nstall [P]lugin
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}

# Update (one or multiple) selected application(s)
# mnemonic [B]rew [U]pdate [P]lugin
bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;

  fi
}

# Delete (one or multiple) selected application(s)
# mnemonic [B]rew [C]lean [P]lugin (e.g. uninstall)
bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}

## Kube stuff
kproxy() {
# Forward the ports to connect to the akorda proxy
local pod=$(kubectl get pods | grep proxy | awk '{print $1}')
kubectl port-forward $pod 8080:8080
}

dbproxy() {
 cloud_sql_proxy -instances=ak-app-01:us-west1:$1-sql=tcp:3306
}

pdbproxy() {
  echo -e "Changing GCloud account to use prod credentials!"
  gcloud config set project ak-prod-1
  cloud_sql_proxy -instances=ak-prod-1:us-central1:akorda-sql=tcp:3306
}

# Find pattern in files
fif() {
  if [ ! "$#" -ge 1 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages $1 | fzf --reverse --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 $1 || rg --ignore-case --pretty --context 10 $1 {}"
}

# Create a note in the notes directory with a unique prefix
note() {
  if [ ! "$#" -ge 1 ]; then echo "Need filename!"; return 1; fi
  local fname=$(date +"%Y%m%d")_$1".md"
  $EDITOR $HOME/Projects/notes/$fname
}

# Create a file with a unique prefix
file() {
  if [ ! "$#" -ge 1 ]; then echo "Need filename!"; return 1; fi
  local fname=$(date +"%Y%m%d")_$1".md"
  $EDITOR $fname
}

# Create a directory with a unique prefix
dir() {
  if [ ! "$#" -ge 1 ]; then echo "Need filename!"; return 1; fi
  mkdir -p $(date +"%Y%m%d")_$1
}

# Open Latest Weekly Plan
plan() {
  cd ~/Projects/PLAN
  $EDITOR $(ls | tail -1)
}
