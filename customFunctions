# vim: ft=sh

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
    *.tar.gz)    tar xvzf $1     ;;
    *.bz2)       bunzip2 $1      ;;
    *.rar)       unrar x $1      ;;
    *.gz)        gunzip $1       ;;
    *.tar)       tar xvf $1      ;;
    *.tbz2)      tar xvjf $1     ;;
    *.tgz)       tar xvzf $1     ;;
    *.zip)       unzip $1        ;;
    *.Z)         uncompress $1   ;;
    *.7z)        7z x $1         ;;
    *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
    else
        echo "'$1' is not a valid file!"
            fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Make your directories and files access rights sane.
function sanitize() { chmod -R u=rwX,g=rX,o= "$@" ;}

# Function calls cht.sh (awesome cheatsheets!)
function cheat() {
      curl cht.sh/$1
  }

# Install (one or multiple) selected application(s)
# using "brew search" as source input
# mnemonic [B]rew [I]nstall [P]lugin
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}

# Update (one or multiple) selected application(s)
# mnemonic [B]rew [U]pdate [P]lugin
bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;

  fi
}

# Delete (one or multiple) selected application(s)
# mnemonic [B]rew [C]lean [P]lugin (e.g. uninstall)
bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}

## Kube stuff
kproxy() {
# Forward the ports to connect to the akorda proxy
kubectl port-forward svc/proxy-svc 8080:8080
}

dbproxy() {
 cloud_sql_proxy -instances=ak-app-01:us-west1:$1-sql=tcp:$2\
   -credential_file=$HOME/Downloads/alberto-ak-app-01-db.json
}

pdbproxy() {
  echo -e "Changing GCloud account to use prod credentials!"
  gcloud config set project ak-prod-1
  cloud_sql_proxy -instances=ak-prod-1:us-central1:akorda-sql=tcp:3306
 cloud_sql_proxy -instances=ak-app-01:us-west1:akorda-sql=tcp:3306 \
   -credential_file=$HOME/Downloads/alberto-prod-db.json
}

topcmd() {
  history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# From https://www.usenix.org/sites/default/files/conference/protected-files/lisa19_maheshwari.pdf
mcd() { mkdir -p $1; cd $1 }
cdl() { cd $1; ls}
backup() { cp "$1"{,.bak};} #test first
gfind() { find / -iname $@ 2>/dev/null }
lfind() { find . -iname $@ 2>/dev/null }
rtfm() { help $@ || man $@ || open "http://www.google.com/search?q=$@"; }
